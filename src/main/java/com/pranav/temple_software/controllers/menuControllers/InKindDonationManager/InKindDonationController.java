// PASTE THIS CODE INTO THE NEW FILE

package com.pranav.temple_software.controllers.menuControllers.InKindDonationManager;

import com.pranav.temple_software.models.DevoteeDetails;
import com.pranav.temple_software.models.InKindDonation;
import com.pranav.temple_software.models.SevaEntry;
import com.pranav.temple_software.repositories.DevoteeRepository;
import com.pranav.temple_software.repositories.InKindDonationRepository;
import com.pranav.temple_software.utils.ReceiptPrinter;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.stage.Stage;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Consumer;

public class InKindDonationController {

	@FXML private TextField devoteeNameField;
	@FXML private TextField contactField;
	@FXML private DatePicker donationDatePicker;
	@FXML private ComboBox<String> raashiComboBox;
	@FXML private ComboBox<String> nakshatraComboBox;
	@FXML private TextArea addressField;
	@FXML private TextField panNumberField;
	@FXML private TextArea itemDescriptionArea;
	@FXML private Button saveButton;
	@FXML private Button cancelButton;

	private final InKindDonationRepository repository = new InKindDonationRepository();
	private final Map<String, List<String>> rashiNakshatraMap = new HashMap<>();
	private final DevoteeRepository devoteeRepository = new DevoteeRepository(); // Added for auto-fill

	@FXML
	public void initialize() {
		donationDatePicker.setValue(LocalDate.now());
		populateRashiComboBox();
		setupRashiNakshatraListener();
		setupPhoneNumberListener(); // Added for auto-fill
		devoteeNameField.setTextFormatter(new TextFormatter<>(change -> {
			change.setText(change.getText().toUpperCase());
			return change;
		}));
		itemDescriptionArea.setTextFormatter(new TextFormatter<>(change -> {
			change.setText(change.getText().toUpperCase());
			return change;
		}));
		panNumberField.setTextFormatter(new TextFormatter<>(change -> {
			change.setText(change.getText().toUpperCase());
			return change;
		}));
		// Removed validatePanRequirement() call from initialize
	}

	/**
	 * Sets up listeners on the phone number field to restrict input and auto-fill devotee details.
	 */
	private void setupPhoneNumberListener() {
		// Restrict input to 10 digits
		contactField.textProperty().addListener((observable, oldValue, newValue) -> {
			if (newValue != null) {
				if (!newValue.matches("\\d*")) {
					contactField.setText(newValue.replaceAll("[^\\d]", ""));
				}
				if (newValue.length() > 10) {
					contactField.setText(newValue.substring(0, 10));
				}
			}
		});

        // Auto-fill when focus is lost [cite: 1284]
		contactField.focusedProperty().addListener((obs, oldVal, newVal) -> {
			if (!newVal) { // When focus is lost
				String phoneNumber = contactField.getText();
				if (phoneNumber != null && phoneNumber.length() == 10) {
					Optional<DevoteeDetails> detailsOpt = devoteeRepository.findLatestDevoteeDetailsByPhone(phoneNumber);
					detailsOpt.ifPresent(this::populateDevoteeDetails);
				}
			}
		});
	}

	/**
	 * [cite_start]Populates the form fields with data fetched from the database[cite: 291].
	 * @param details The devotee details object.
	 */
	private void populateDevoteeDetails(DevoteeDetails details) {
		if (details == null) return;
		devoteeNameField.setText(details.getName() != null ? details.getName() : "");
		addressField.setText(details.getAddress() != null ? details.getAddress() : "");
		panNumberField.setText(details.getPanNumber() != null ? details.getPanNumber() : "");

		if (details.getRashi() != null && !details.getRashi().isEmpty()) {
			raashiComboBox.setValue(details.getRashi());
		} else {
			raashiComboBox.getSelectionModel().selectFirst();
		}

		Platform.runLater(() -> {
			if (details.getNakshatra() != null && !details.getNakshatra().isEmpty()) {
				if (nakshatraComboBox.getItems().contains(details.getNakshatra())) {
					nakshatraComboBox.setValue(details.getNakshatra());
				}
			}
		});
	}


	@FXML
	private void handleSave() {
		if (!validateInput()) {
			return;
		}

		InKindDonation newDonation = new InKindDonation(
				0, // ID is auto-generated by the database
				devoteeNameField.getText(),
				contactField.getText(),
				addressField.getText(),
				panNumberField.getText(),
				raashiComboBox.getValue(),
				nakshatraComboBox.getValue(),
				donationDatePicker.getValue(),
				itemDescriptionArea.getText()
		);

		boolean success = repository.saveInKindDonation(newDonation);
		if (success) {
			// Get the latest saved donation with ID
			List<InKindDonation> donations = repository.getAllInKindDonations();
			if (!donations.isEmpty()) {
				InKindDonation savedDonation = donations.get(0); // First item is latest (ORDER BY DESC)

				// Show print preview
				try {
					// Create a ReceiptPrinter instance (you'll need to pass this or create it)
					ReceiptPrinter receiptPrinter = new ReceiptPrinter(null); // You may need to adjust this

					Consumer<Boolean> onPrintComplete = (printSuccess) -> {
						if (printSuccess) {
							Platform.runLater(() -> {
								showAlert(Alert.AlertType.INFORMATION, "Success",
										"In-kind donation receipt printed successfully!");
								closeWindow();
							});
						} else {
							Platform.runLater(() -> {
								showAlert(Alert.AlertType.WARNING, "Print Cancelled",
										"Receipt was saved but printing was cancelled.");
								closeWindow();
							});
						}
					};
					Runnable onDialogClosed = () -> {
						Platform.runLater(() -> closeWindow());
					};

					Stage ownerStage = (Stage) saveButton.getScene().getWindow();
					receiptPrinter.showInKindDonationPrintPreview(savedDonation, ownerStage, onPrintComplete, onDialogClosed);
				} catch (Exception e) {
					e.printStackTrace();
					showAlert(Alert.AlertType.ERROR, "Print Error",
							"Receipt saved successfully but failed to open print preview: " + e.getMessage());
					closeWindow();
				}
			} else {
				showAlert(Alert.AlertType.ERROR, "Error", "Failed to retrieve saved donation for printing.");
				closeWindow();
			}
		} else {
			showAlert(Alert.AlertType.ERROR, "Database Error", "Failed to save the donation. Please check the logs.");
		}
	}

	private boolean validateInput() {
		if (devoteeNameField.getText() == null || devoteeNameField.getText().trim().isEmpty()) {
			showAlert(Alert.AlertType.WARNING, "Validation Error", "Devotee Name is required.");
			return false;
		}
		if (itemDescriptionArea.getText() == null || itemDescriptionArea.getText().trim().isEmpty()) {
			showAlert(Alert.AlertType.WARNING, "Validation Error", "Item Description is required.");
			return false;
		}
		if (donationDatePicker.getValue() == null) {
			showAlert(Alert.AlertType.WARNING, "Validation Error", "Donation Date is required.");
			return false;
		}
		// Validate PAN format before saving
		String pan = panNumberField.getText();
		if (pan != null && !pan.trim().isEmpty() && !isValidPanFormat(pan.trim())) {
			showAlert(Alert.AlertType.WARNING, "Invalid PAN Format", "Please enter a valid PAN number format (e.g., AAAPL1234C)");
			return false;
		}
		return true;
	}

	private boolean isValidPanFormat(String pan) {
		if (pan == null || pan.length() != 10) {
			return false;
		}
		// PAN format: 5 letters, 4 digits, 1 letter [cite: 236]
		return pan.matches("[A-Z]{5}[0-9]{4}[A-Z]{1}");
	}

	@FXML
	private void handleCancel() {
		closeWindow();
	}

	private void closeWindow() {
		Stage stage = (Stage) cancelButton.getScene().getWindow();
		stage.close();
	}

	private void populateRashiComboBox() {
		ObservableList<String> rashiOptions = FXCollections.observableArrayList();
		rashiOptions.add("ಆಯ್ಕೆ");
		rashiOptions.addAll(
				"ಮೇಷ", "ವೃಷಭ", "ಮಿಥುನ", "ಕರ್ಕಾಟಕ", "ಸಿಂಹ", "ಕನ್ಯಾ",
				"ತುಲಾ", "ವೃಶ್ಚಿಕ", "ಧನು", "ಮಕರ", "ಕುಂಭ", "ಮೀನ"
		);
		raashiComboBox.setItems(rashiOptions);
		raashiComboBox.getSelectionModel().selectFirst();
	}

	private void setupRashiNakshatraListener() {
		// Populate the Rashi-Nakshatra mapping
		rashiNakshatraMap.put("ಮೇಷ", Arrays.asList("ಅಶ್ವಿನಿ", "ಭರಣಿ", "ಕೃತಿಕ"));
		rashiNakshatraMap.put("ವೃಷಭ", Arrays.asList("ಕೃತಿಕ", "ರೋಹಿಣಿ", "ಮೃಗಶಿರ"));
		rashiNakshatraMap.put("ಮಿಥುನ", Arrays.asList("ಮೃಗಶಿರ", "ಆರ್ದ್ರ", "ಪುನರ್ವಸು"));
		rashiNakshatraMap.put("ಕರ್ಕ", Arrays.asList("ಪುನರ್ವಸು", "ಪುಷ್ಯ", "ಆಶ್ಲೇಷ"));
		rashiNakshatraMap.put("ಸಿಂಹ", Arrays.asList("ಮಘ", "ಪೂರ್ವ ಫಲ್ಗುನಿ", "ಉತ್ತರ ಫಲ್ಗುನಿ"));
		rashiNakshatraMap.put("ಕನ್ಯಾ", Arrays.asList("ಉತ್ತರ ಫಲ್ಗುನಿ", "ಹಸ್ತ", "ಚಿತ್ರ"));
		rashiNakshatraMap.put("ತುಲಾ", Arrays.asList("ಚಿತ್ರ", "ಸ್ವಾತಿ", "ವಿಶಾಖ"));
		rashiNakshatraMap.put("ವೃಶ್ಚಿಕ", Arrays.asList("ವಿಶಾಖ", "ಅನುರಾಧ", "ಜ್ಯೇಷ್ಠ"));
		rashiNakshatraMap.put("ಧನುಸ್", Arrays.asList("ಮೂಲ", "ಪೂರ್ವ ಆಷಾಢ", "ಉತ್ತರ ಆಷಾಢ"));
		rashiNakshatraMap.put("ಮಕರ", Arrays.asList("ಉತ್ತರ ಆಷಾಢ", "ಶ್ರವಣ", "ಧನಿಷ್ಠ"));
		rashiNakshatraMap.put("ಕುಂಭ", Arrays.asList("ಧನಿಷ್ಠ", "ಶತಭಿಷ", "ಪೂರ್ವ ಭಾದ್ರಪದ"));
		rashiNakshatraMap.put("ಮೀನ", Arrays.asList("ಪೂರ್ವ ಭಾದ್ರಪದ", "ಉತ್ತರ ಭಾದ್ರಪದ", "ರೇವತಿ"));

		nakshatraComboBox.setDisable(true);
		raashiComboBox.getSelectionModel().selectedItemProperty().addListener(
				(obs, oldVal, newVal) -> {
					if (newVal == null || newVal.equals("ಆಯ್ಕೆ")) {
						nakshatraComboBox.setDisable(true);
						nakshatraComboBox.getItems().clear();
					} else {
						List<String> nakshatras = rashiNakshatraMap.get(newVal);
						if (nakshatras != null) {
							nakshatraComboBox.setItems(FXCollections.observableArrayList(nakshatras));
							nakshatraComboBox.setDisable(false);
						}
					}
				});
	}

	private void showAlert(Alert.AlertType alertType, String title, String message) {
		Alert alert = new Alert(alertType);
		alert.setTitle(title);
		alert.setHeaderText(null);
		alert.setContentText(message);
		alert.showAndWait();
	}
}