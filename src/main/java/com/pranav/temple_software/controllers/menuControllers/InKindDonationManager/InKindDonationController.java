// PASTE THIS CODE INTO THE NEW FILE

package com.pranav.temple_software.controllers.menuControllers.InKindDonationManager;

import com.pranav.temple_software.models.InKindDonation;
import com.pranav.temple_software.models.SevaEntry;
import com.pranav.temple_software.repositories.InKindDonationRepository;
import com.pranav.temple_software.utils.ReceiptPrinter;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.stage.Stage;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;

public class InKindDonationController {

	@FXML private TextField devoteeNameField;
	@FXML private TextField contactField;
	@FXML private DatePicker donationDatePicker;
	@FXML private ComboBox<String> raashiComboBox;
	@FXML private ComboBox<String> nakshatraComboBox;
	@FXML private TextArea addressField;
	@FXML private TextField panNumberField;
	@FXML private TextArea itemDescriptionArea;
	@FXML private Button saveButton;
	@FXML private Button cancelButton;

	private final InKindDonationRepository repository = new InKindDonationRepository();
	private final Map<String, List<String>> rashiNakshatraMap = new HashMap<>();

	@FXML
	public void initialize() {
		donationDatePicker.setValue(LocalDate.now());
		populateRashiComboBox();
		setupRashiNakshatraListener();
		devoteeNameField.setTextFormatter(new TextFormatter<>(change -> {
			change.setText(change.getText().toUpperCase());
			return change;
		}));
		itemDescriptionArea.setTextFormatter(new TextFormatter<>(change -> {
			change.setText(change.getText().toUpperCase());
			return change;
		}));
		panNumberField.setTextFormatter(new TextFormatter<>(change -> {
			change.setText(change.getText().toUpperCase());
			return change;
		}));
		validatePanRequirement();
	}

	@FXML
	private void handleSave() {
		if (!validateInput()) {
			return;
		}

		InKindDonation newDonation = new InKindDonation(
				0, // ID is auto-generated by the database
				devoteeNameField.getText(),
				contactField.getText(),
				addressField.getText(),
				panNumberField.getText(),
				raashiComboBox.getValue(),
				nakshatraComboBox.getValue(),
				donationDatePicker.getValue(),
				itemDescriptionArea.getText()
		);

		boolean success = repository.saveInKindDonation(newDonation);

		if (success) {
			// Get the latest saved donation with ID
			List<InKindDonation> donations = repository.getAllInKindDonations();
			if (!donations.isEmpty()) {
				InKindDonation savedDonation = donations.get(0); // First item is latest (ORDER BY DESC)

				// Show print preview
				try {
					// Create a ReceiptPrinter instance (you'll need to pass this or create it)
					ReceiptPrinter receiptPrinter = new ReceiptPrinter(null); // You may need to adjust this

					Consumer<Boolean> onPrintComplete = (printSuccess) -> {
						if (printSuccess) {
							Platform.runLater(() -> {
								showAlert(Alert.AlertType.INFORMATION, "Success",
										"In-kind donation receipt printed successfully!");
								closeWindow();
							});
						} else {
							Platform.runLater(() -> {
								showAlert(Alert.AlertType.WARNING, "Print Cancelled",
										"Receipt was saved but printing was cancelled.");
								closeWindow();
							});
						}
					};

					Runnable onDialogClosed = () -> {
						Platform.runLater(() -> closeWindow());
					};

					Stage ownerStage = (Stage) saveButton.getScene().getWindow();
					receiptPrinter.showInKindDonationPrintPreview(savedDonation, ownerStage, onPrintComplete, onDialogClosed);

				} catch (Exception e) {
					e.printStackTrace();
					showAlert(Alert.AlertType.ERROR, "Print Error",
							"Receipt saved successfully but failed to open print preview: " + e.getMessage());
					closeWindow();
				}
			} else {
				showAlert(Alert.AlertType.ERROR, "Error", "Failed to retrieve saved donation for printing.");
				closeWindow();
			}
		} else {
			showAlert(Alert.AlertType.ERROR, "Database Error", "Failed to save the donation. Please check the logs.");
		}
	}

	private boolean validatePanRequirement() {
		String panNumber = panNumberField.getText();
			// Basic PAN format validation
			if (!isValidPanFormat(panNumber.trim())) {
				showAlert(Alert.AlertType.INFORMATION,"Invalid PAN",
						"Please enter a valid PAN number format (e.g., AAAPL1234C)");
				Platform.runLater(() -> panNumberField.requestFocus());
				return false;
			}
		return true;
	}

	private boolean isValidPanFormat(String pan) {
		if (pan == null || pan.length() != 10) {
			return false;
		}
		// PAN format: 5 letters, 4 digits, 1 letter
		return pan.matches("[A-Z]{5}[0-9]{4}[A-Z]{1}");
	}

	private boolean validateInput() {
		if (devoteeNameField.getText() == null || devoteeNameField.getText().trim().isEmpty()) {
			showAlert(Alert.AlertType.WARNING, "Validation Error", "Devotee Name is required.");
			return false;
		}
		if (itemDescriptionArea.getText() == null || itemDescriptionArea.getText().trim().isEmpty()) {
			showAlert(Alert.AlertType.WARNING, "Validation Error", "Item Description is required.");
			return false;
		}
		if (donationDatePicker.getValue() == null) {
			showAlert(Alert.AlertType.WARNING, "Validation Error", "Donation Date is required.");
			return false;
		}
		return true;
	}

	@FXML
	private void handleCancel() {
		closeWindow();
	}

	private void closeWindow() {
		Stage stage = (Stage) cancelButton.getScene().getWindow();
		stage.close();
	}

	private void populateRashiComboBox() {
		ObservableList<String> rashiOptions = FXCollections.observableArrayList();
		rashiOptions.add("ಆಯ್ಕೆ");
        rashiOptions.addAll(
				"ಮೇಷ", "ವೃಷಭ", "ಮಿಥುನ", "ಕರ್ಕಾಟಕ", "ಸಿಂಹ", "ಕನ್ಯಾ",
				"ತುಲಾ", "ವೃಶ್ಚಿಕ", "ಧನು", "ಮಕರ", "ಕುಂಭ", "ಮೀನ"
		);
		raashiComboBox.setItems(rashiOptions);
		raashiComboBox.getSelectionModel().selectFirst();
	}

	private void setupRashiNakshatraListener() {
		// ಮೇಷ (Aries)
		rashiNakshatraMap.put("ಮೇಷ", Arrays.asList("ಅಶ್ವಿನಿ", "ಭರಣಿ", "ಕೃತ್ತಿಕ"));

		// ವೃಷಭ (Taurus)
		rashiNakshatraMap.put("ವೃಷಭ", Arrays.asList("ಕೃತ್ತಿಕ", "ರೋಹಿಣಿ", "ಮೃಗಶಿರ"));

		// ಮಿಥುನ (Gemini)
		rashiNakshatraMap.put("ಮಿಥುನ", Arrays.asList("ಮೃಗಶಿರ", "ಆರ್ದ್ರಾ", "ಪುನರ್ವಸು"));

		// ಕರ್ಕ (Cancer)
		rashiNakshatraMap.put("ಕರ್ಕಾಟಕ", Arrays.asList("ಪುನರ್ವಸು", "ಪುಷ್ಯ", "ಆಶ್ಲೇಷ"));

		// ಸಿಂಹ (Leo)
		rashiNakshatraMap.put("ಸಿಂಹ", Arrays.asList("ಮಘಾ", "ಪೂರ್ವ ಫಲ್ಗುಣಿ", "ಉತ್ತರ ಫಲ್ಗುಣಿ"));

		// ಕನ್ಯಾ (Virgo)
		rashiNakshatraMap.put("ಕನ್ಯಾ", Arrays.asList("ಉತ್ತರ ಫಲ್ಗುಣಿ", "ಹಸ್ತ", "ಚಿತ್ರ"));

		// ತುಲಾ (Libra)
		rashiNakshatraMap.put("ತುಲಾ", Arrays.asList("ಚಿತ್ರ", "ಸ್ವಾತಿ", "ವಿಶಾಖಾ"));

		// ವೃಶ್ಚಿಕ (Scorpio)
		rashiNakshatraMap.put("ವೃಶ್ಚಿಕ", Arrays.asList("ವಿಶಾಖಾ", "ಅನುರಾಧ", "ಜೇಷ್ಠ"));

		// ಧನುಸ್ (Sagittarius)
		rashiNakshatraMap.put("ಧನು", Arrays.asList("ಮೂಲ", "ಪೂರ್ವಾಷಾಢ", "ಉತ್ತರಾಷಾಡ"));

		// ಮಕರ (Capricorn)
		rashiNakshatraMap.put("ಮಕರ", Arrays.asList("ಉತ್ತರಾಷಾಡ", "ಶ್ರವಣ", "ಧನಿಷ್ಠ"));

		// ಕುಂಭ (Aquarius)
		rashiNakshatraMap.put("ಕುಂಭ", Arrays.asList("ಧನಿಷ್ಠ", "ಶತಭಿಷ", "ಪೂರ್ವಭಾದ್ರ"));

		// ಮೀನ (Pisces)
		rashiNakshatraMap.put("ಮೀನ", Arrays.asList("ಪೂರ್ವಭಾದ್ರ", "ಉತ್ತರಾಭಾದ್ರ", "ರೇವತಿ"));

		nakshatraComboBox.setDisable(true);
        raashiComboBox.getSelectionModel().selectedItemProperty().addListener( // [cite: 878]
				(obs, oldVal, newVal) -> {
					if (newVal == null || newVal.equals("ಆಯ್ಕೆ")) {
						nakshatraComboBox.setDisable(true);
						nakshatraComboBox.getItems().clear();
					} else {
						List<String> nakshatras = rashiNakshatraMap.get(newVal);
						if (nakshatras != null) {
							nakshatraComboBox.setItems(FXCollections.observableArrayList(nakshatras));
							nakshatraComboBox.setDisable(false);
						}
					}
				});
	}

	private void showAlert(Alert.AlertType alertType, String title, String message) {
		Alert alert = new Alert(alertType);
		alert.setTitle(title);
		alert.setHeaderText(null);
		alert.setContentText(message);
		alert.showAndWait();
	}
}